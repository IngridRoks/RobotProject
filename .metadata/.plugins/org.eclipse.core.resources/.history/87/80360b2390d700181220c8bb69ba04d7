package behaviour.modules.procedures.keuze_opdracht;

import behaviour.modules.BehaviourModule;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.sensor.EV3IRSensor;
import lejos.robotics.SampleProvider;
import lejos.utility.Delay;
import nl.hva.miw.robot.cohort13.Marvin;

public class KeuzeOpdrachtModule extends BehaviourModule {
	private final long runTime = 30000;

	public KeuzeOpdrachtModule(Marvin marvin) {
		super(marvin);
	}

	@Override
	public boolean execute() {
		
			TextLCD textLCD = getMarvin().getBrick().getTextLCD();
			EV3IRSensor afstandTester = getMarvin().proximitySensor;
			final SampleProvider sp = afstandTester.getDistanceMode();
			long startTime = System.currentTimeMillis();
			long lastTime = System.currentTimeMillis();
			float [] sample = new float[sp.sampleSize()];
		   
		    int distanceValue = (int)sample[0];
		    textLCD.drawString("Distance:", 2, 1);
	        textLCD.drawString("" + distanceValue, 1, 2);
	        textLCD.setAutoRefresh(false);
//	        startDrive();
//	        rotate180();
	        grabIt();
//	        letLoose();
		    
//	        while (lastTime - startTime < runTime) {
//	        	lastTime = System.currentTimeMillis();
//	        	sp.fetchSample(sample,0);
//				textLCD.refresh();
//				textLCD.clear();
//				float d = sample[0];
//	        	
//	        	if(d < 20) {
//			       	stopRobot();
//			       	Delay.msDelay(1000);
//			    	rotate180();
//			    	Delay.msDelay(3000);
//	        	} else if ( d >20 ){	
//			    	startDrive();
//			    	Delay.msDelay(1000);
//			    	grabIt();
//			    	Delay.msDelay(2000);
//			    	startDrive();
//			    	Delay.msDelay(2000);
//			    	letLoose();
//		    }
//	        }
//	        stopRobot();
	        return true;
		}
		
	
	public void startDrive() {
		marvin.groteMotorLinks.forward();
		marvin.groteMotorRechts.forward();
		marvin.groteMotorLinks.setSpeed(300);
		marvin.groteMotorRechts.setSpeed(300);
	}
	
	public void stopRobot() {
		marvin.groteMotorLinks.stop();
		marvin.groteMotorRechts.stop();
	}	
	
	public void rotate180 () {
		long startTime180 = System.currentTimeMillis();
		long lastTime180 = System.currentTimeMillis();
		
		while (lastTime180 - startTime180 <3000) {
			lastTime180 = System.currentTimeMillis();
			marvin.groteMotorLinks.forward();
			marvin.groteMotorLinks.setSpeed(300);
			marvin.groteMotorRechts.backward();
			marvin.groteMotorRechts.setSpeed(300);
		}
	}
	
	public void grabIt() {
		marvin.kleineMotorArm.forward();
		marvin.kleineMotorArm.setSpeed(100);
		Delay.msDelay(500);
		marvin.kleineMotorArm.stop();
	}
	
	public void letLoose() {
		marvin.kleineMotorArm.backward();
		marvin.kleineMotorArm.setSpeed(100);
		Delay.msDelay(500);
		marvin.kleineMotorArm.stop();
	}
	
	
	
	
}
